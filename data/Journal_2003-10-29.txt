Svetlin Stanchev requested a variation of the web application that
can read in a dependency graph saved as an XML document.  This way,
one can build on one machine, including generating the graph, and only
copy the graph to the web server machine instead of copying all the
classes resulting from the compilation.  It sounded like a good idea
and so I added =load.jsp= to do just that.  I might have to
redesign the footer a little and the web app's parameters.  One
drawback is that in order to read the XML document, the web application
needs an XML parser.  This means I need to add Xerces to the web app,
bumping up the WAR file's size considerably.

By configuring Log4J correctly, Svetlin Stanchev took graph
extraction from 6 hours down to 10 minutes.  I'm happy about that.

I was trying to analyze the main JAR file of Together Control
Center as an example of working with a large piece of software (i.e.,
with a huge number of classes).  I didn't get very far because one
of the classes in the JAR appeared corrupted and broke the whole
=.class= file loading process.  I adjusted
=ClassfileLoaderEventSource= so it can skip single,
malformed classes without aborting everything.  It turns out they used
an obfuscator and it added a text file with a =.class=
extension, fooling Dependency Finder into trying to parse it like a
regular =.class= file with bytecode in it.

I gave a shot at [[http://sourceforge.net/tracker/index.php?func%3Ddetail&aid%3D825582&group_id%3D43305&atid%3D435887][Feature Request 825582]],
the one about the pattern cache for =Perl5Util=.  I tried
to build a cache based on a simple =HashMap= with
"unlimited" capacity, but when I use it in
=SelectiveTraversalStrategy=, I get a bunch of
=OutOfMemoryError= even from seemingly unrelated areas of
the code.  More later...
