Changed dependencies on =java.io.DataInputStream= to =java.io.DataInput=
instead.

Looked at =Classfile.locateMethod()= and I found something that seemed strange at
first glance: it will return a method defined on the class regardless of its
access privilege, but will only return one that is inherited if it is public or
protected.  This makes sense, since otherwise it would not be inherited.  But it
is missing the case of a package-level method from a superclass or interface in
the same package.  The expected behavior is not documented and there are no
tests to tell me what I had in mind when I first wrote it.  So I tried to write
a test for it, but the constructor for =Classfile= does *way* too much work.  It
reads a lot of data from the =DataInput=, including the constant pool and
interfaces and fields and methods and attributes.  Specifying all of these in a
test is too brittle, I'd much rather supply mocks for all these collaborators.
If I used the
[[http://code.google.com/p/google-collections/][Google Collections]], I could
have a special constructor and mark it =@VisibleForTesting=.
