Following up on the Mastodon
[[https://techhub.social/@paintgoblin@warhammer.social/113136435478210877][question about identically named methods]],
but with different return types.  The original poster gave an example that
implemented =Enumeration&lt;E&gt;=, and its =nextElement()= that should return
an =E=.

I updated my illustrative example.

    public interface Factory&lt;T&gt; {
        T create();
    }
    &nbsp;
    public class Circle {}
    &nbsp;
    public class CircleFactory implements Factory&lt;Circle&gt; {
        public Circle create() {
            return new Circle();
        }
    }

=CircleFactory= still has two =create()= methods: one is a bridge method that
returns an =Object= from the definition of =Factory= with type erasure, and the
other remains the method from the source that returns a =Circle=.

During the discussion, I had to double-check my definitions for descriptors and
signatures.  A method's signature<label for%3D"sn-2024-09-16-method-signature" class%3D"margin-toggle sidenote-number"></label>
<input type%3D"checkbox" id%3D"sn-2024-09-16-method-signature" class%3D"margin-toggle">
<span class%3D"sidenote">[[https://docs.oracle.com/javase/specs/jls/se22/html/jls-8.html#jls-8.4.2][JLS &sect;8.4.2]]</span>
is its _name_ + _parameter types_.  A method's descriptor<label for%3D"sn-2024-09-16-method-descriptor" class%3D"margin-toggle sidenote-number"></label>
<input type%3D"checkbox" id%3D"sn-2024-09-16-method-descriptor" class%3D"margin-toggle">
<span class%3D"sidenote">[[https://docs.oracle.com/javase/specs/jvms/se22/html/jvms-4.html#jvms-4.3.3][JVMS &sect;4.3.3]]</span>
is its _parameter types_ + _return type_.  It's interesting to note that
strictly speaking, a method's name is not part of its descriptor.

From this, we can state that the compiler will reject source code for a class
with duplicate signatures<label for%3D"sn-2024-09-16-duplicate-signatures" class%3D"margin-toggle sidenote-number"></label>
<input type%3D"checkbox" id%3D"sn-2024-09-16-duplicate-signatures" class%3D"margin-toggle">
<span class%3D"sidenote">JLS &sect;8.4.2 "It is a compile-time error to declare
two methods with override-equivalent signatures in a class."</span>.  But, the
JVM will accept the bytecode of a class that has methods with matching
signatures, as long as their descriptors are different<label for%3D"sn-2024-09-16-different-descriptors" class%3D"margin-toggle sidenote-number"></label>
<input type%3D"checkbox" id%3D"sn-2024-09-16-different-descriptors" class%3D"margin-toggle">
<span class%3D"sidenote">JVMS &sect;4.6 "No two methods in one class file may
have the same name and descriptor (ยง4.3.3)."</span>.
