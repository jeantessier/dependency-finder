Spiked on printing the call graph for closures as a chain of calls instead of
a flat dependency graph.

Back on [[2008-11-05]], I toyed with the idea of using composition to deal with
sharing behavior in the =com.jeantessier.classreader.Visitor= hierarchy.  At the
time, I was thinking of wrapping a =TextPrinter= inside a =TraversalVisitor=,
where the outer visitor would be responsible for traversing the structure and
would call on the inner visitor for specific processing at each node.  This
created problems for =XMLPrinter= which needs to do both pre- and
post-processing on each node.

But what if the =Printer= was the outer visitor and the traversal was done by
the inner one?  Then, the printer would have free reign in doing all the
"around" work it wants.  It would call in to the inner visitor when it is ready
to traverse a nodes subsequent structure.  The inner visitor would still have to
call out to the outer one whenever it moves to a new node, though.  Reminds me
of cross recursion, somehow.

[[../images/Visitor%5FCross%5FComposition.png]]

The code for =visitMethod%5Finfo()= would look something like:

    public abstract class *VisitorDecorator* implements Visitor {
        private Visitor delegate;

        public Visitor getDelegate() {
            return delegate;
        }

        public void setDelegate(Visitor delegate) {
            this.delegate = delegate;
        }
    }

    public class *TraversalVisitor* extends VisitorDecorator {
        public void *visitMethod%5Finfo*(Method%5Finfo method) {
            for(Attribute_info attribute : method.getAttributes()) {
                attribute.accept(*getDelegate()*);
            }
        }
    }

    public abstract class Printer extends *VisitorDecorator* {
        ...
    }

    public class *TextPrinter* extends Printer {
        public void *visitMethod%5Finfo*(Method%5Finfo method) {
            append("    ").append(method.getDeclaration()).append(";").eol();
            method.accept(*getDelegate()*);
        }
    }

    public class *XMLPrinter* extends Printer {
        public void *visitMethod%5Finfo*(Method%5Finfo method) {
            indent().append("&lt;method&gt;").eol();
            raiseIndent();

            indent().append("&lt;declaration&gt;").append(method.getDeclaration()).append("&lt;/declaration&gt;").eol();

            method.accept(*getDelegate()*);

            lowerIndent();
            indent().append("&lt;/method&gt;").eol();
        }
    }

Notice how the printers call =method.accept(getDelegate())= to get further
processing of the current node.  The =TraversalVisitor= instead calls
=attribute.accept(getDelegate())=, moving the processing further along the
structure.

The flow of control would constantly pass back and forth between the two
visitors.  It all pretty much depends on which one starts the ball rolling.

The reason I'm revisiting this issue is because I find myself in need of a
=com.jeantessier.dependency.Visitor= that would traverse the graph depth-first
along _inbound_ and _outbound_ dimensions, instead of a the current shallow
traversal.

The code to use this would look like:

    Printer printer = new TextPrinter(...);
    Visitor traversal = new TraversalVisitor(...);

    printer.setDelegate(traversal);
    traversal.setDelegate(printer);

    printer.traverseNodes(factory.getPackages().values());

And I could use it to print transitive closures, based on the _start_ criteria.
