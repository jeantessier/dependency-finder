Tried to generate GraphML where class-in-package and feature-in-class
relationships were modeled using subgraphs instead of simple edges, but the
resulting graph didn't look too good in
[[http://www.yworks.com/en/products%5Fyed%5Fabout.htm][yEd]].

For example, take this simple dependency graph:

    p1
        C1
            f1
                --> p2.C2.f2
    p2
        C2
            f2
                <-- p1.C1.f1


Using edges to represent containment, I get this picture:

[[../images/p1.C1.f1%5Fp2.C2.f2%5Fedges.jpg]]

Whereas using subgraphs, I get this picture:

[[../images/p1.C1.f1%5Fp2.C2.f2%5Fsubgraphs.jpg]]

Clearly, this second form will not scale to classes with many features, or to
packages with many classes.

A co-worker asked for means to determine what JARs are needed by a given JAR.
While Dependency Finder does not store the source of a class, such as its JAR
file, there are ways to get close to the answer.  You can get the dependency
graph for a JAR with =DependencyExtractor=, roll it up to package-level
dependencies with =p2p=, and then list the unconfirmed packages from =p2p='s
output.  Dependency Finder doesn't have a tool for this last step, but I was
able to put together an XSL stylesheet to do just that.

I also realized I did not document =DependencyGraphToGraphML= nor
=DependencyGraphToyEd= on the Tools page.  So I took care of it at the same time
as I documented the new stylesheet for unconfirmed symbols:
=DependencyGraphToUnconfirmedFullyQualifiedNames=.
