Fixed =LCOM4Gatherer= so it ignores constructors, as per LCOM4.  I used
=Perl5Util= to match the feature name to a pattern, but I'm debating using
=java.util.regex= instead.

Code with =Perl5Util=:

    private static final Perl5Util perl = new Perl5Util();
    &nbsp;
    private boolean isConstructor(FeatureNode node) {
        return perl.match("/(\\w+)\\.\\1\\(/", node.getName());
    }

Code with =java.util.regex=:

    private static final Pattern CONSTRUCTOR_PATTERN = Pattern.compile("(\\w+)\\.\\1\\(");
    &nbsp;
    private boolean isConstructor(FeatureNode node) {
        return CONSTRUCTOR_PATTERN.matcher(node.getName()).find();
    }

For this check, I find the =Perl5Util= code easier to work with, and I already
use =Perl5Util= everywhere.  But I feel =java.util.regex= might actually be
more efficient by using a native implementation in the JVM itself.

Maybe this logic belongs in =FeatureNode= instead of being replicated in a lot
of places.  I guess I answered my own question.

Changed the signature of =TraversalStrategy.order()= so it returns the exact
same type that was passed in, using generics.
