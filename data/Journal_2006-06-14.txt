Looked a little at =closure.jsp= and tried to figure out why it returns an
empty closure when I give it a perfectly valid starting point.  The classes
involved with =TransitiveClosureEngine= are not instrumented with Log4J, which
hinders me a little.  I will have to take care of that before I can
investigate further.  I also need to come up with sample data that reproduces
the problem.  I tried a trivial graph =a.A.a() --> b.B.b() --> c.C.c()= but
that one worked just fine.

I was discussing the =com.jeantessier.dependency.Visitor= hierarchy with a
colleague and complained about the complicated contract for children of
=VisitorBase=, especially for the printers.  During the discussion, it dawned
on me that I could try composition instead of inheritance.  The visitors would
delegate traversal to a stragegy, the way they do now, but they could also
delegate processing of each node to another collaborator.  The contract with
the _processor_ would still be fairly complex to preserve flexibility, but
might be easier to manage.

A user raised an issue with =DependencyClosure= as they were trying to compute
a class-level outbound closure.  Some classes at the edges were missing unless
they used =-maximize= during extraction.  Without looking, it looks
suspiciously related to some
[[http://depfind.sourceforge.net/Manual.html#TrickyBehavior][tricky behavior]]
I documented in the Manual already.
