Tied =Instruction= more closely to =Code_attribute= so that some of the
instruction processing could be centralized there.  =Instruction= is now a
=Visitable= and =VisitorBase= automatically traverses them when processing a
=Code_attribute=.  So I was able to pull the code for iterating over bytecode
from the various visitors into the abstract base class.  Also, now that
individual =Instruction= instances know about their corresponding
=Code_attribute= and its =Classfile= and its =ConstantPool=, those that
represent opcodes with indices into the constant pool can retrieve the correct
=ConstantPoolEntry= themselves, instead of relying on client code to do it.
These two changes together simplified greatly the various operations that walk
the bytecode.

=Instruction= knows whether or not it holds an index into the constant pool.
For now, I simply used the list from =CodeDependencyCollector=, but I will need
to take a close look at the entire instruction set to make sure I have a
complete solution.

I also take this knowledge into account when comparing instructions in
=Instruction.equals()= and in computing =Instruction.hashCode()=.  If the
instruction actually refers to a =ConstantPoolEntry=, =equals()= and
=hashCode()= will use the entry's =equals()= and =hashCode()= as part of their
computation.  Otherwise, they just do a byte-to-byte comparison of the
instruction's data.

With these new tools, I revisited the case a user had brought to my attention
on [[2006-02-21]].  At the time, =JarJarDiff= only did byte-to-byte comparison
when checking for code changes in methods.  The user complained that they had
changed only one method but =JarJarDiff= was flagging them all as different
after a recompile.  It turns out the constant pool was reordered between the two
compilations, resulting in different indices and therefore different bytes in
the bytecode.  Now, instructions are isolated from any shuffling in the constant
pool, so I expect that only the modified method will show up in the =JarJarDiff=
report.

There were three.  One was the method that had been modified, it had extra
instructions.  I was able to run =ClassReader= on the classes to compare
the actual instructions for the other two.  In both cases, the reordering of
the constant pool had pushed the index of a reference beyond 255 and required
an =ldc_w= instruction of 3 bytes instead of a simple =ldc= instruction of 2
bytes.  I could introduce special treatment to equate =ldc= with =ldc_w=, but
I feel this could lead to fairly convoluted comparison rules.
