Refactored =SymbolGatherer= to use a Strategy pattern when deciding which
symbols to gather or not.  I want to write a custom strategy for collecting
non-private fields, which I couldn't do with the code before I extracted the
decision-making process into another object.  I'm debating if =SymbolGatherer=
shouldn't use a collection of strategies instead, collecting symbols that
match at least one strategy.

Created a custom =SymbolGathererStrategy= for detecting non-private,
non-static, non-synthetic fields.

Added =&lt;synthetic&gt;= tags to fields, methods, and inner classes in the XML
representation of =Classfile=.

Refactored =com.jeantessier.commandline.TestAliasSwitch= and
=com.jeantessier.classreader.TestVisitorBase= to use jMock instead of custom
mocks.  I was able to get 100% code coverage for
=com.jeantessier.classreader.VisitorBase=.  I was also able to get rid
of =com.jeantessier.commandline.MockVisitor=.

With this in place, I was able to used Dependency Finder on another project to
find dependencies on non-private fields.

    $ DependencyExtractor -xml -out df.xml [JARs ...]
    $ ListSymbols -non-private-field-names -out names.txt [JARs ...]
    $ DependencyReporter -scope-includes-list names.txt -class-filter -show-inbounds -show-empty-nodes df.xml

I could then use these results to track where one class acceses the fields of
another class and replace them with accessors.
 