Fixed =CodeDependencyCollector= to correctly track dependencies on annotations.
For now, it only captures dependencies on the annotation itself, not on any
element values that it might contain.  This will come next.

I implemented support for rendering elements of runtime annotations in
=XMLPrinter=.

I also modified =EnumElementValue.getTypeName()= and
=ClassElementValue.getClassInfo()= so they convert class names in path
notation to a proper class name.  Internally, these class names are stored as
UTF-8 strings, not =ClassInfo_attribute= structures, so these classes have to
take care of converting strings containing encoded class names such as
="Lfoo/Bar;"= to proper class names such as ="foo.Bar"=.

[[http://docs.google.com/View?docid=dgzzp6gn_116ff9f3dcn][Jens Dietrich]] uses
Dependency Finder in his [[http://code.google.com/p/gql4jung/][gpl4jung]]
project.

Removed dependencies on =toString()= when getting the names of elements of
=Classfile=.  It is much better to be explicit about which piece of data is
needed rather than rely on what an object's string representation is.  Also, it
is impossible to mock =toString()= using jMock.
